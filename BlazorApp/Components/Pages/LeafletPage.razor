@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer
@page "/"

<div class="map-container">
    <div id="map"></div>
    <div class="button-overlay">
        <button class="btn btn-primary" @onclick="BackClass">Back Class</button>
        <button class="btn btn-secondary" @onclick="NextClass">Next Class</button>
        <button class="btn btn-primary" @onclick="BackDay">Back Day</button>
        <button class="btn btn-secondary" @onclick="NextDay">Next Day</button>
    </div>
    <InputFile OnChange="@SingleUpload" accept=".ics" class="file-upload"/>
</div>

@code {
    private IJSObjectReference? module;
    private List<string> logging = new();
    private List<List<Route>> routes = [];
    private int dayIndex = 0;
    private int classIndex = 0;
    
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) {
            return;
        }
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./leafletmap.js");
        if (module != null) {
            await module.InvokeAsync<string>("load_map");
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync() {
        if (module is not null) {
            await module.DisposeAsync();
        }
    }

    private async Task DrawGeoJson(string geoJson, string color = "blue", double opacity = 1) {
        if (module != null) {
            await module.InvokeAsync<string>("draw_route", geoJson, color, opacity);
            
        }
    }

    private async Task DrawMarker(double lat, double lng, string popup = null) {
        if (module != null) {
            await module.InvokeAsync<string>("add_marker", lat, lng, popup);
            
        }
    }

    private async Task DrawRoute(Route route, string color = "blue", double opacity = 1) {
        await DrawGeoJson(route.GetGeoJson(), color, opacity);
        await DrawMarker(route.GetStartLatLng()[0], route.GetStartLatLng()[1], route.GetStartLocation().Name);
        await DrawMarker(route.GetEndLatLng()[0], route.GetEndLatLng()[1], route.GetEndLocation().Name);
    }

    private async Task ClearRoutes() {
        if (module != null) {
            await module.InvokeAsync<string>("clear_map");
        }
    }

    private async Task DrawAllRoutes() {
        await ClearRoutes();
        for (int i = 0; i < routes[dayIndex].Count; i++) {
            if (i == classIndex) continue;
            Route route = routes[dayIndex][i];
            if (route.IsComputed()) {
                await DrawRoute(route, "gray", 0.5);
            }
        }
        var selectedRoute = routes[dayIndex][classIndex];
        await DrawRoute(selectedRoute, "blue");
    }


    private async Task SingleUpload(InputFileChangeEventArgs e) {
        try {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(e.File.Name));
            string path = Path.Combine("./uploads", newFileName);
            Directory.CreateDirectory("./uploads");
            await using (FileStream fs = new(path, FileMode.Create)) {
                await e.File.OpenReadStream().CopyToAsync(fs);
            }

            string calenderText = File.ReadAllText(path);
            Directory.Delete("./uploads", true);
            var calendar = Ical.Net.Calendar.Load(calenderText);
            await ProcessCalendar(calendar);
        } catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    private async Task ProcessCalendar(Ical.Net.Calendar calendar) {
        Schedule schedule = new(calendar);
        routes.Clear();
        dayIndex = 0;
        classIndex = 0;
        for (int day = 1; day < 6; day++) {
            List<Route> daysRoutes = new List<Route>();
            List<Class> classes = schedule.GetClasses(day);
            for (int i = 0; i < classes.Count - 1; i++) {
                Class startClass = classes[i];
                Class destinationClass = classes[i + 1];
                if (startClass.location == destinationClass.location) continue;
                Route route = classes[i].CreateRoute(classes[i + 1]);
                await route.SendRequestAsync();
                daysRoutes.Add(route);
            }
            routes.Add(daysRoutes);
        }
        
        await DrawAllRoutes();
    }

    private async Task NextClass() {
        if (classIndex < routes[dayIndex].Count - 1) {
            classIndex++;
            await DrawAllRoutes();
        }
    }

    private async Task BackClass() {
        if (classIndex > 0) {
            classIndex--;
            await DrawAllRoutes();
        }
    }

    private async Task NextDay() {
        if (dayIndex < routes.Count - 1) {
            dayIndex++;
            classIndex = 0;
            await DrawAllRoutes();
        }
    }

    private async Task BackDay() {
        if (dayIndex > 0) {
            dayIndex--;
            classIndex = 0;
            await DrawAllRoutes();
        }
    }
}